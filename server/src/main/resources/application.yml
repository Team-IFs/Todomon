cloud:
  aws:
    region:
      static: ap-northeast-2
    stack:
      auto: false
spring:  # 환경변수
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${google_clientId}
            client-secret: ${google_clientSecret}
            scope: email, profile
            redirect-uri: ${google_redirect_url}
          naver:
            client-id: ${naver_clientId}
            client-secret: ${naver_clientSecret}
            scope: nickname,email
            client-name: Naver
            authorization-grant-type: authorization_code
            redirect-uri: ${naver_redirect_url}
          kakao:
            client-id: ${kakao_clientId}
            client-secret: ${kakao_clientSecret}
            scope: profile_nickname, account_email
            client-name: Kakao
            authorization-grant-type: authorization_code
            redirect-uri: ${kakao_redirect_url}
            client-authentication-method: POST
        provider:
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id
---
spring:
  config:
    import: 'aws-parameterstore:'
  mail:
    host: smtp.gmail.com
    port: 587
    username: ${mail_username}
    password: ${mail_password}
    properties:
      mail.smtp.auth: true
      mail.smtp.starttls.enable: true
  mvc:
    pathmatch:
      matching-strategy: ant_path_matcher
  datasource:
    url: ${datasource.url}
    password: ${datasource_password}
    username: ${datasource_username}
    driver-class-name: com.mysql.cj.jdbc.Driver
  jpa:
    hibernate:
      ddl-auto: update  # (1) 스키마 자동 생성
    show-sql: true      # (2) SQL 쿼리 출력
    properties:
      hibernate:
        highlight_sql: true
        show_sql: true
        format_sql: true
        default_batch_fetch_size: 100
  redis:
    host: localhost
    port: 6379

mail:
  address:
    admin: ${admin_address}
jwt:
  key:
    secret: ${jwt_key}        # 민감한 정보는 시스템 환경 변수에서 로드한다.
  access-token-expiration-minutes: 30
  refresh-token-expiration-minutes: 420

aws:
  paramstore:
    name: todomon
    enabled: true
    profile-separator:
    prefix: /config

springdoc:
  api-docs:
    enabled: true
  swagger-ui:
    enabled: true
    tagsSorter: alpha
    operations-sorter: alpha
    display-request-duration: true
  show-login-endpoint: true
  version: 'v1'